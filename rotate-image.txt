------------
rotate image
------------

example
-------
input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
output: [[7,4,1],[8,5,2],[9,6,3]]

you have to rotate the image in-place, which means you have to modify the input 2D matrix directly
do not allocate another 2D matrix and do the rotation

constraints:
n == matrix.length == matrix[i].length
1 <= n <= 20
-1000 <= matrix[i][j] <= 1000

pseudocode
----------
looking at the image, i am noticing that 1, 3, 9, and 7 are forming an outer square
2, 6, 8, 4 are forming an inner square 
5 stays in place 

1 2 3      7 4 1
4 5 6  ->  8 5 2
7 8 9      9 6 3

5  1  9  11      15 13 2  5
2  4  8  10  ->  14 3  4  1
13 3  4  7       12 6  8  9
15 14 12 16      16 7  10 11

solution
--------
class Solution {
    public void rotate(int[][] matrix) {
        int left = 0;
        int right = matrix.length - 1; 
        
        while (left < right) {
            for(int i = 0; i  < right - left; i++) {
                int top = left; 
                int bottom = right; 
                
                // save the top left
                int topLeft = matrix[top][left + i];
                
                // move bottom left into top left 
                matrix[top][left + i] = matrix[bottom - i][left];
                
                // move bottom right into bottom left 
                matrix[bottom - i][left] = matrix[bottom][right - i];         
                
                // move top right into bottomo right 
                matrix[bottom][right - i] = matrix[top + i][right];
                
                // move top left into top right 
                matrix[top + i][right] = topLeft; 
                
            }
            right--; 
            left++; 
        }
    }
}

time complexity: O(n^2)
space complexity: O(n) 