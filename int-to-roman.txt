----------------
integer to roman
----------------

example 
-------
input: num = 58
output: "LVIII"
explanation: L = 50, V = 5, III = 3

symbol       value
------       -----
I             1
V             5
X             10
L             50
C             100
D             500
M             1000

I can be placed before V (5) and X (10) to make 4 and 9 
X can be placed before L (50) and C (100) to make 40 and 90
C can be placed before D (500) and M (1000) to make 400 and 90

constrains: 
1 <= num <= 3999

the result should be a string

thoughts 
--------
24 -> XXIV 
324 -> CCCXXIV
104 -> CIV (notice how 0 is basically skipped) 
20 -> XX (2 maps to XX, 0 maps to empty string) 

mapping digits in an array 

// mapping 0 -> 9 to roman numerals 
String[] units = {"", "I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX"};
// mapping 10 -> 90
String[] tens = {"", "X", "XX", "XXX", "XL", "L", "LX", "LXX", "LXXX", "XC"};
mapping 100 -> 900
String[] hundreds = {"", "C", "CC", "CCC", "CD", "D", "DC", "DCC", "DCCC", "CM"};
mapping 1000 -> 3000
String[] thousands = {"", "M", "MM", "MMM"};


solution
--------
class Solution {
    public String intToRoman(int num) {
        // mapping 0 -> 9 to roman numerals 
        String[] units = {"", "I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX"};
        // mapping 10 -> 90
        String[] tens = {"", "X", "XX", "XXX", "XL", "L", "LX", "LXX", "LXXX", "XC"};
        // mapping 100 -> 900
        String[] hundreds = {"", "C", "CC", "CCC", "CD", "D", "DC", "DCC", "DCCC", "CM"};
        // mapping 1000 -> 3000
        String[] thousands = {"", "M", "MM", "MMM"};
        
        return thousands[num / 1000] +
               hundreds[(num % 1000) / 100] +
               tens[(num % 100) / 10] +
               units[num % 10];
    }
}

























